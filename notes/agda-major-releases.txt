When releasing a new major version of Agda, the following procedure can be
followed:

* First, release a release candidate (see
  notes/agda-releases-candidates).

* Finish the CHANGELOG.

* Update README.md, if necessary.

* Update the LICENSE file, if necessary.

* Update Stackage resolvers, if necessary.

* Verify that the Travis builds have no errors.

* The $FILES variable represents the files where it is necessary to
  change the version number.

    $FILES=
      .ghci
      Agda.cabal
      default.nix
      doc/user-manual/conf.py
      mk/versions.mk
      src/data/emacs-mode/agda2-mode.el
      src/data/emacs-mode/agda2-mode-pkg.el
      src/size-solver/size-solver.cabal
      test/interaction/Issue1244a.out
      test/interaction/Issue1244b.out

* Update in the bug tracker the milestone field of open issues to the
  next Agda version.

* Get a clean Agda repository.

    git clone git@github.com:agda/agda agda-release
    cd agda-release
    git checkout future

* The version of the release is current version in the future branch, so if
  this is 2.5.0 the versions used in these notes are:

    VERSION=<current-version>
    VERSION=2.5.0

    NEXT_MASTER_VERSION=<current-version-plus-0.0.1>
    NEXT_MASTER_VERSION=2.5.1

    NEXT_FUTURE_VERSION=<current-version-plus-0.1.0>
    NEXT_FUTURE_VERSION=2.6.0

* Update the version numbers to $VERSION in $FILES.

* Obtain and install the standard library branch related to the Agda
  new version.

    make up-to-date-std-lib

* Remove -Werror and -fprof-auto from Agda.cabal (this is required by
  `cabal --check`).

* Run the test-suite:

    make compile-emacs-mode
    make test

  Note that "compile-emacs-mode" invokes "agda-mode compile", which
  should ensure that the Emacs mode can be compiled without errors or
  warnings (except for the "cl package required at runtime" warning).

* Remove the Cabal test-suite from Agda.cabal.

* Update the user manual:

    make user-manual-pdf

* Build source distributions:

    cabal configure
    cabal check
    cabal sdist

* Build documentation for uploading to Hackage. Adapted from
  https://hackage.haskell.org/upload (2018-05-19):

    cabal haddock --for-hackage --haddock-option=--hyperlinked-source

* Ensure that the package builds properly (with multiple versions of GHC if
  possible) in Linux, MacOS X and Windows.

    BASE=`pwd`
    cd ${TMPDIR:-/tmp}
    tar xzf $BASE/dist/Agda-$VERSION.tar.gz
    cd Agda-$VERSION
    cabal install

  Do not forget to test:

  ** The Emacs mode

* Tag the release (do not forget to record the changes above first):

    cd $BASE
    git tag -a v$VERSION -m "Agda $VERSION release"

* Upload the tarball and the documentation to Hackage (tested with
  cabal-install >= 2.0.0.0):

    cd $BASE
    cabal upload dist/Agda-$VERSION.tar.gz
    cabal upload -d dist/Agda-$VERSION-docs.tar.gz

* Restore the Cabal tests-suites `agda-tests` and `internal-tests`
  from Agda.cabal.

* Restore -Werror and -fprof-auto in Agda.cabal.

* Update branches

  ** Merge future into master

       git checkout master
       git merge future

  ** Update the version numbers to $NEXT_MASTER_VERSION in $FILES.

  ** Add into the Makefile:

      # --program-suffix is not for the executable name in
      # $(BUILD_DIR)/build/, only for installing it into .cabal/bin
      override CABAL_OPTS+=--program-suffix=-$(VERSION)

      AGDA_MODE=agda-mode-$(VERSION)

  ** Add a new header to CHANGELOG.

  ** Commit the above changes.

  ** Merge the master back into the future branch.

       git checkout future
       git merge master

* Update the version numbers to $NEXT_FUTURE_VERSION in $FILES.

* Remove from the Makefile:

    # --program-suffix is not for the executable name in
    # $(BUILD_DIR)/build/, only for installing it into .cabal/bin
    override CABAL_OPTS+=--program-suffix=-$(VERSION)

    AGDA_MODE=agda-mode-$(VERSION)

* Remove the release notes for the released version from
  doc/release-notes and create a template for the next version.

* Push all changes

    git push --follow-tags
    git checkout master
    git push

* Update the Agda Wiki:

  ** Update the Download page:

     *** Move the current version information to the old releases
         section.

     *** Update the last release information.

     *** Update the stable version information.

  ** Update the Main page.

* Update Agda Manual on Readthedocs.org (see Issues #2844 and #3035)

  ** You need Admin permissions on the Agda readthedocs.org project
     (current admins: asr, andreasabel, phile314)

  ** Go to readthedocs.org -> Agda Project -> Admin -> Versions

  ** Mark $VERSION as active

  ** Set the default documentation version to $VERSION

  ** If a release candidate was released then remove the associated
     documentation.

* Announce the release of the new version on the Agda mailing lists
  (users and developers).

* Close in the bug tracker the milestone $VERSION.

* Enable the released version of Agda on Stackage, if necessary.

